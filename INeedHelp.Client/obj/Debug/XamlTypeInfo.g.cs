//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace INeedHelp.Client
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace INeedHelp.Client.INeedHelp_Client_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::INeedHelp.Client.Common.LayoutAwarePage(); }

        private object Activate_1_AddRequestViewModel() { return new global::INeedHelp.Client.ViewModels.AddRequestViewModel(); }

        private object Activate_2_BaseViewModel() { return new global::INeedHelp.Client.ViewModels.BaseViewModel(); }

        private object Activate_4_BooleanToVisibilityConverter() { return new global::INeedHelp.Client.Common.BooleanToVisibilityConverter(); }

        private object Activate_5_AddRequestView() { return new global::INeedHelp.Client.Views.AddRequestView(); }

        private object Activate_6_EditRequestViewModel() { return new global::INeedHelp.Client.ViewModels.EditRequestViewModel(); }

        private object Activate_7_HelpRequestModel() { return new global::INeedHelp.Client.Models.HelpRequestModel(); }

        private object Activate_9_EditRequestView() { return new global::INeedHelp.Client.Views.EditRequestView(); }

        private object Activate_10_HomeViewModel() { return new global::INeedHelp.Client.ViewModels.HomeViewModel(); }

        private object Activate_12_WrapPanel() { return new global::WinRTXamlToolkit.Controls.WrapPanel(); }

        private object Activate_13_HomeView() { return new global::INeedHelp.Client.Views.HomeView(); }

        private object Activate_14_LoginViewModel() { return new global::INeedHelp.Client.ViewModels.LoginViewModel(); }

        private object Activate_15_LoginView() { return new global::INeedHelp.Client.Views.LoginView(); }

        private object Activate_16_MyRequestsViewModel() { return new global::INeedHelp.Client.ViewModels.MyRequestsViewModel(); }

        private object Activate_17_MyRequestsView() { return new global::INeedHelp.Client.Views.MyRequestsView(); }

        private object Activate_18_PrivacyPolicySettingsView() { return new global::INeedHelp.Client.Views.PrivacyPolicySettingsView(); }

        private object Activate_19_ProfileSettingsView() { return new global::INeedHelp.Client.Views.ProfileSettingsView(); }

        private object Activate_20_RegisterViewModel() { return new global::INeedHelp.Client.ViewModels.RegisterViewModel(); }

        private object Activate_21_RegisterView() { return new global::INeedHelp.Client.Views.RegisterView(); }

        private object Activate_22_RequestDetailsViewModel() { return new global::INeedHelp.Client.ViewModels.RequestDetailsViewModel(); }

        private object Activate_23_RequestDetailsView() { return new global::INeedHelp.Client.Views.RequestDetailsView(); }

        private object Activate_24_SearchRequestsViewModel() { return new global::INeedHelp.Client.ViewModels.SearchRequestsViewModel(); }

        private object Activate_25_SearchRequestsView() { return new global::INeedHelp.Client.Views.SearchRequestsView(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Boolean":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Boolean));
                break;

            case "Int32":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Int32));
                break;

            case "Windows.UI.Xaml.Controls.Panel":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Panel));
                break;

            case "Windows.UI.Xaml.Controls.Orientation":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Orientation));
                break;

            case "Double":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Double));
                break;

            case "INeedHelp.Client.Common.LayoutAwarePage":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.AddRequestViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.AddRequestViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_1_AddRequestViewModel;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("PictureUrl");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AddRequest");
                userType.AddMemberName("GetPictureFromCamera");
                userType.AddMemberName("GetPictureFromFile");
                userType.AddMemberName("IsAddingRequest");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.BaseViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.BaseViewModel), GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_BaseViewModel;
                userType.AddMemberName("Username");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("UserPictureUrl");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("SuccessMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Logout");
                userType.AddMemberName("GoToAddRequest");
                userType.AddMemberName("GoToMyRequests");
                userType.AddMemberName("GoToHome");
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "INeedHelp.Client.Common.BooleanToVisibilityConverter":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Common.BooleanToVisibilityConverter), GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_BooleanToVisibilityConverter;
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.AddRequestView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.AddRequestView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_5_AddRequestView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.EditRequestViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.EditRequestViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_6_EditRequestViewModel;
                userType.AddMemberName("Request");
                userType.AddMemberName("CommentsCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("EditRequestLoaded");
                userType.AddMemberName("AddHelper");
                userType.AddMemberName("SaveChanges");
                userType.AddMemberName("ExportRequest");
                userType.AddMemberName("AddTile");
                userType.AddMemberName("HelpersCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("SuggestedHelpers");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.UserModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.UserModel>");
                userType.AddMemberName("IsSavingRequest");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Models.HelpRequestModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Models.HelpRequestModel), GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_HelpRequestModel;
                xamlType = userType;
                break;

            case "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.UserModel>":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.UserModel>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.UserModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.UserModel>");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.EditRequestView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.EditRequestView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_9_EditRequestView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.HomeViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.HomeViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_10_HomeViewModel;
                userType.AddMemberName("MaxDistance");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("HelpRequests");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                userType.AddMemberName("HomeViewLoaded");
                userType.AddMemberName("FilterRequests");
                userType.AddMemberName("RequestsLoading");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("RequestsVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlType = userType;
                break;

            case "WinRTXamlToolkit.Controls.WrapPanel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::WinRTXamlToolkit.Controls.WrapPanel), GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_12_WrapPanel;
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ItemHeight");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                userType.AddMemberName("ItemWidth");
                AddToMapOfTypeToStandardName(typeof(global::System.Double),
                                                   "Double");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.HomeView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.HomeView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_13_HomeView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.LoginViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.LoginViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_14_LoginViewModel;
                userType.AddMemberName("Username");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("LoggingIn");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Login");
                userType.AddMemberName("GoToRegister");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.LoginView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.LoginView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_15_LoginView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.MyRequestsViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.MyRequestsViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_16_MyRequestsViewModel;
                userType.AddMemberName("HelpRequests");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                userType.AddMemberName("RequestsLoading");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("RequestsVisible");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.MyRequestsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.MyRequestsView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_17_MyRequestsView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.PrivacyPolicySettingsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.PrivacyPolicySettingsView), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_PrivacyPolicySettingsView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.ProfileSettingsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.ProfileSettingsView), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_19_ProfileSettingsView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.RegisterViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.RegisterViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_20_RegisterViewModel;
                userType.AddMemberName("Username");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FirstName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("LastName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ProfilePictureUrl");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Registering");
                AddToMapOfTypeToStandardName(typeof(global::System.Boolean),
                                                   "Boolean");
                userType.AddMemberName("Register");
                userType.AddMemberName("GetPictureFromCamera");
                userType.AddMemberName("GetPictureFromFile");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.RegisterView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.RegisterView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_21_RegisterView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.RequestDetailsViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_22_RequestDetailsViewModel;
                userType.AddMemberName("Request");
                userType.AddMemberName("CommentText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("CommentsCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("HelpersCount");
                AddToMapOfTypeToStandardName(typeof(global::System.Int32),
                                                   "Int32");
                userType.AddMemberName("RequestDetailsLoaded");
                userType.AddMemberName("AddComment");
                userType.AddMemberName("ViewOnMap");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.RequestDetailsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.RequestDetailsView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_23_RequestDetailsView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.SearchRequestsViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.SearchRequestsViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_24_SearchRequestsViewModel;
                userType.AddMemberName("QueryText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("HelpRequests");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                userType.AddMemberName("SearchLoaded");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.SearchRequestsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.SearchRequestsView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_25_SearchRequestsView;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_AddRequestViewModel_Text(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.Text;
        }
        private void set_0_AddRequestViewModel_Text(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_1_AddRequestViewModel_Title(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.Title;
        }
        private void set_1_AddRequestViewModel_Title(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_2_AddRequestViewModel_PictureUrl(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.PictureUrl;
        }
        private void set_2_AddRequestViewModel_PictureUrl(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            that.PictureUrl = (global::System.String)Value;
        }
        private object get_3_AddRequestViewModel_AddRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.AddRequest;
        }
        private object get_4_AddRequestViewModel_GetPictureFromCamera(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.GetPictureFromCamera;
        }
        private object get_5_AddRequestViewModel_GetPictureFromFile(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.GetPictureFromFile;
        }
        private object get_6_AddRequestViewModel_IsAddingRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.IsAddingRequest;
        }
        private void set_6_AddRequestViewModel_IsAddingRequest(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            that.IsAddingRequest = (global::System.Boolean)Value;
        }
        private object get_7_BaseViewModel_Username(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.Username;
        }
        private object get_8_BaseViewModel_UserPictureUrl(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.UserPictureUrl;
        }
        private object get_9_BaseViewModel_SuccessMessage(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.SuccessMessage;
        }
        private void set_9_BaseViewModel_SuccessMessage(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            that.SuccessMessage = (global::System.String)Value;
        }
        private object get_10_BaseViewModel_ErrorMessage(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.ErrorMessage;
        }
        private void set_10_BaseViewModel_ErrorMessage(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            that.ErrorMessage = (global::System.String)Value;
        }
        private object get_11_BaseViewModel_Logout(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.Logout;
        }
        private object get_12_BaseViewModel_GoToAddRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.GoToAddRequest;
        }
        private object get_13_BaseViewModel_GoToMyRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.GoToMyRequests;
        }
        private object get_14_BaseViewModel_GoToHome(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.GoToHome;
        }
        private object get_15_EditRequestViewModel_Request(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.Request;
        }
        private void set_15_EditRequestViewModel_Request(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            that.Request = (global::INeedHelp.Client.Models.HelpRequestModel)Value;
        }
        private object get_16_EditRequestViewModel_CommentsCount(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.CommentsCount;
        }
        private object get_17_EditRequestViewModel_EditRequestLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.EditRequestLoaded;
        }
        private object get_18_EditRequestViewModel_AddHelper(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.AddHelper;
        }
        private object get_19_EditRequestViewModel_SaveChanges(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.SaveChanges;
        }
        private object get_20_EditRequestViewModel_ExportRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.ExportRequest;
        }
        private object get_21_EditRequestViewModel_AddTile(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.AddTile;
        }
        private object get_22_EditRequestViewModel_HelpersCount(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.HelpersCount;
        }
        private object get_23_EditRequestViewModel_SuggestedHelpers(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.SuggestedHelpers;
        }
        private object get_24_EditRequestViewModel_IsSavingRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.IsSavingRequest;
        }
        private void set_24_EditRequestViewModel_IsSavingRequest(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            that.IsSavingRequest = (global::System.Boolean)Value;
        }
        private object get_25_HomeViewModel_MaxDistance(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            return that.MaxDistance;
        }
        private void set_25_HomeViewModel_MaxDistance(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            that.MaxDistance = (global::System.String)Value;
        }
        private object get_26_HomeViewModel_HelpRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            return that.HelpRequests;
        }
        private void set_26_HomeViewModel_HelpRequests(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            that.HelpRequests = (global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>)Value;
        }
        private object get_27_HomeViewModel_HomeViewLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            return that.HomeViewLoaded;
        }
        private object get_28_HomeViewModel_FilterRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            return that.FilterRequests;
        }
        private object get_29_HomeViewModel_RequestsLoading(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            return that.RequestsLoading;
        }
        private void set_29_HomeViewModel_RequestsLoading(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            that.RequestsLoading = (global::System.Boolean)Value;
        }
        private object get_30_HomeViewModel_RequestsVisible(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.HomeViewModel)instance;
            return that.RequestsVisible;
        }
        private object get_31_WrapPanel_Orientation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            return that.Orientation;
        }
        private void set_31_WrapPanel_Orientation(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_32_WrapPanel_ItemHeight(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            return that.ItemHeight;
        }
        private void set_32_WrapPanel_ItemHeight(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_33_WrapPanel_ItemWidth(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            return that.ItemWidth;
        }
        private void set_33_WrapPanel_ItemWidth(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            that.ItemWidth = (global::System.Double)Value;
        }
        private object get_34_LoginViewModel_Username(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.Username;
        }
        private void set_34_LoginViewModel_Username(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_35_LoginViewModel_LoggingIn(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.LoggingIn;
        }
        private void set_35_LoginViewModel_LoggingIn(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            that.LoggingIn = (global::System.Boolean)Value;
        }
        private object get_36_LoginViewModel_Login(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.Login;
        }
        private object get_37_LoginViewModel_GoToRegister(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.GoToRegister;
        }
        private object get_38_MyRequestsViewModel_HelpRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyRequestsViewModel)instance;
            return that.HelpRequests;
        }
        private void set_38_MyRequestsViewModel_HelpRequests(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyRequestsViewModel)instance;
            that.HelpRequests = (global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>)Value;
        }
        private object get_39_MyRequestsViewModel_RequestsLoading(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyRequestsViewModel)instance;
            return that.RequestsLoading;
        }
        private void set_39_MyRequestsViewModel_RequestsLoading(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyRequestsViewModel)instance;
            that.RequestsLoading = (global::System.Boolean)Value;
        }
        private object get_40_MyRequestsViewModel_RequestsVisible(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyRequestsViewModel)instance;
            return that.RequestsVisible;
        }
        private object get_41_RegisterViewModel_Username(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.Username;
        }
        private void set_41_RegisterViewModel_Username(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_42_RegisterViewModel_FirstName(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.FirstName;
        }
        private void set_42_RegisterViewModel_FirstName(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.FirstName = (global::System.String)Value;
        }
        private object get_43_RegisterViewModel_LastName(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.LastName;
        }
        private void set_43_RegisterViewModel_LastName(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.LastName = (global::System.String)Value;
        }
        private object get_44_RegisterViewModel_ProfilePictureUrl(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.ProfilePictureUrl;
        }
        private void set_44_RegisterViewModel_ProfilePictureUrl(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.ProfilePictureUrl = (global::System.String)Value;
        }
        private object get_45_RegisterViewModel_Registering(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.Registering;
        }
        private void set_45_RegisterViewModel_Registering(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.Registering = (global::System.Boolean)Value;
        }
        private object get_46_RegisterViewModel_Register(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.Register;
        }
        private object get_47_RegisterViewModel_GetPictureFromCamera(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.GetPictureFromCamera;
        }
        private object get_48_RegisterViewModel_GetPictureFromFile(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.GetPictureFromFile;
        }
        private object get_49_RequestDetailsViewModel_Request(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.Request;
        }
        private void set_49_RequestDetailsViewModel_Request(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            that.Request = (global::INeedHelp.Client.Models.HelpRequestModel)Value;
        }
        private object get_50_RequestDetailsViewModel_CommentText(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.CommentText;
        }
        private void set_50_RequestDetailsViewModel_CommentText(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            that.CommentText = (global::System.String)Value;
        }
        private object get_51_RequestDetailsViewModel_CommentsCount(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.CommentsCount;
        }
        private object get_52_RequestDetailsViewModel_HelpersCount(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.HelpersCount;
        }
        private object get_53_RequestDetailsViewModel_RequestDetailsLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.RequestDetailsLoaded;
        }
        private object get_54_RequestDetailsViewModel_AddComment(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.AddComment;
        }
        private object get_55_RequestDetailsViewModel_ViewOnMap(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.ViewOnMap;
        }
        private object get_56_SearchRequestsViewModel_QueryText(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.SearchRequestsViewModel)instance;
            return that.QueryText;
        }
        private void set_56_SearchRequestsViewModel_QueryText(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.SearchRequestsViewModel)instance;
            that.QueryText = (global::System.String)Value;
        }
        private object get_57_SearchRequestsViewModel_HelpRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.SearchRequestsViewModel)instance;
            return that.HelpRequests;
        }
        private void set_57_SearchRequestsViewModel_HelpRequests(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.SearchRequestsViewModel)instance;
            that.HelpRequests = (global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>)Value;
        }
        private object get_58_SearchRequestsViewModel_SearchLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.SearchRequestsViewModel)instance;
            return that.SearchLoaded;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember xamlMember = null;
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.Text":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_0_AddRequestViewModel_Text;
                xamlMember.Setter = set_0_AddRequestViewModel_Text;
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.Title":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_1_AddRequestViewModel_Title;
                xamlMember.Setter = set_1_AddRequestViewModel_Title;
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.PictureUrl":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "PictureUrl", "String");
                xamlMember.Getter = get_2_AddRequestViewModel_PictureUrl;
                xamlMember.Setter = set_2_AddRequestViewModel_PictureUrl;
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.AddRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "AddRequest", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_3_AddRequestViewModel_AddRequest;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.GetPictureFromCamera":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GetPictureFromCamera", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_4_AddRequestViewModel_GetPictureFromCamera;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.GetPictureFromFile":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GetPictureFromFile", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_5_AddRequestViewModel_GetPictureFromFile;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.IsAddingRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "IsAddingRequest", "Boolean");
                xamlMember.Getter = get_6_AddRequestViewModel_IsAddingRequest;
                xamlMember.Setter = set_6_AddRequestViewModel_IsAddingRequest;
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.Username":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_7_BaseViewModel_Username;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.UserPictureUrl":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "UserPictureUrl", "String");
                xamlMember.Getter = get_8_BaseViewModel_UserPictureUrl;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.SuccessMessage":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "SuccessMessage", "String");
                xamlMember.Getter = get_9_BaseViewModel_SuccessMessage;
                xamlMember.Setter = set_9_BaseViewModel_SuccessMessage;
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.ErrorMessage":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ErrorMessage", "String");
                xamlMember.Getter = get_10_BaseViewModel_ErrorMessage;
                xamlMember.Setter = set_10_BaseViewModel_ErrorMessage;
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.Logout":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Logout", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_11_BaseViewModel_Logout;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.GoToAddRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToAddRequest", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_12_BaseViewModel_GoToAddRequest;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.GoToMyRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToMyRequests", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_13_BaseViewModel_GoToMyRequests;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.GoToHome":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToHome", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_14_BaseViewModel_GoToHome;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.Request":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Request", "INeedHelp.Client.Models.HelpRequestModel");
                xamlMember.Getter = get_15_EditRequestViewModel_Request;
                xamlMember.Setter = set_15_EditRequestViewModel_Request;
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.CommentsCount":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "CommentsCount", "Int32");
                xamlMember.Getter = get_16_EditRequestViewModel_CommentsCount;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.EditRequestLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "EditRequestLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_17_EditRequestViewModel_EditRequestLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.AddHelper":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "AddHelper", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_18_EditRequestViewModel_AddHelper;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.SaveChanges":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "SaveChanges", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_19_EditRequestViewModel_SaveChanges;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.ExportRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ExportRequest", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_20_EditRequestViewModel_ExportRequest;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.AddTile":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "AddTile", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_21_EditRequestViewModel_AddTile;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.HelpersCount":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpersCount", "Int32");
                xamlMember.Getter = get_22_EditRequestViewModel_HelpersCount;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.SuggestedHelpers":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "SuggestedHelpers", "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.UserModel>");
                xamlMember.Getter = get_23_EditRequestViewModel_SuggestedHelpers;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.IsSavingRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "IsSavingRequest", "Boolean");
                xamlMember.Getter = get_24_EditRequestViewModel_IsSavingRequest;
                xamlMember.Setter = set_24_EditRequestViewModel_IsSavingRequest;
                break;
            case "INeedHelp.Client.ViewModels.HomeViewModel.MaxDistance":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.HomeViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "MaxDistance", "String");
                xamlMember.Getter = get_25_HomeViewModel_MaxDistance;
                xamlMember.Setter = set_25_HomeViewModel_MaxDistance;
                break;
            case "INeedHelp.Client.ViewModels.HomeViewModel.HelpRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.HomeViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpRequests", "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlMember.Getter = get_26_HomeViewModel_HelpRequests;
                xamlMember.Setter = set_26_HomeViewModel_HelpRequests;
                break;
            case "INeedHelp.Client.ViewModels.HomeViewModel.HomeViewLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.HomeViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HomeViewLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_27_HomeViewModel_HomeViewLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.HomeViewModel.FilterRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.HomeViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "FilterRequests", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_28_HomeViewModel_FilterRequests;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.HomeViewModel.RequestsLoading":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.HomeViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "RequestsLoading", "Boolean");
                xamlMember.Getter = get_29_HomeViewModel_RequestsLoading;
                xamlMember.Setter = set_29_HomeViewModel_RequestsLoading;
                break;
            case "INeedHelp.Client.ViewModels.HomeViewModel.RequestsVisible":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.HomeViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "RequestsVisible", "Boolean");
                xamlMember.Getter = get_30_HomeViewModel_RequestsVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.WrapPanel.Orientation":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WrapPanel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_WrapPanel_Orientation;
                xamlMember.Setter = set_31_WrapPanel_Orientation;
                break;
            case "WinRTXamlToolkit.Controls.WrapPanel.ItemHeight":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WrapPanel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_WrapPanel_ItemHeight;
                xamlMember.Setter = set_32_WrapPanel_ItemHeight;
                break;
            case "WinRTXamlToolkit.Controls.WrapPanel.ItemWidth":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WrapPanel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_WrapPanel_ItemWidth;
                xamlMember.Setter = set_33_WrapPanel_ItemWidth;
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.Username":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_34_LoginViewModel_Username;
                xamlMember.Setter = set_34_LoginViewModel_Username;
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.LoggingIn":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "LoggingIn", "Boolean");
                xamlMember.Getter = get_35_LoginViewModel_LoggingIn;
                xamlMember.Setter = set_35_LoginViewModel_LoggingIn;
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.Login":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Login", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_36_LoginViewModel_Login;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.GoToRegister":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToRegister", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_37_LoginViewModel_GoToRegister;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.MyRequestsViewModel.HelpRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.MyRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpRequests", "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlMember.Getter = get_38_MyRequestsViewModel_HelpRequests;
                xamlMember.Setter = set_38_MyRequestsViewModel_HelpRequests;
                break;
            case "INeedHelp.Client.ViewModels.MyRequestsViewModel.RequestsLoading":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.MyRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "RequestsLoading", "Boolean");
                xamlMember.Getter = get_39_MyRequestsViewModel_RequestsLoading;
                xamlMember.Setter = set_39_MyRequestsViewModel_RequestsLoading;
                break;
            case "INeedHelp.Client.ViewModels.MyRequestsViewModel.RequestsVisible":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.MyRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "RequestsVisible", "Boolean");
                xamlMember.Getter = get_40_MyRequestsViewModel_RequestsVisible;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.Username":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_41_RegisterViewModel_Username;
                xamlMember.Setter = set_41_RegisterViewModel_Username;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.FirstName":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "FirstName", "String");
                xamlMember.Getter = get_42_RegisterViewModel_FirstName;
                xamlMember.Setter = set_42_RegisterViewModel_FirstName;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.LastName":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "LastName", "String");
                xamlMember.Getter = get_43_RegisterViewModel_LastName;
                xamlMember.Setter = set_43_RegisterViewModel_LastName;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.ProfilePictureUrl":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ProfilePictureUrl", "String");
                xamlMember.Getter = get_44_RegisterViewModel_ProfilePictureUrl;
                xamlMember.Setter = set_44_RegisterViewModel_ProfilePictureUrl;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.Registering":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Registering", "Boolean");
                xamlMember.Getter = get_45_RegisterViewModel_Registering;
                xamlMember.Setter = set_45_RegisterViewModel_Registering;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.Register":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Register", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_46_RegisterViewModel_Register;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.GetPictureFromCamera":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GetPictureFromCamera", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_47_RegisterViewModel_GetPictureFromCamera;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.GetPictureFromFile":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GetPictureFromFile", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_48_RegisterViewModel_GetPictureFromFile;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.Request":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Request", "INeedHelp.Client.Models.HelpRequestModel");
                xamlMember.Getter = get_49_RequestDetailsViewModel_Request;
                xamlMember.Setter = set_49_RequestDetailsViewModel_Request;
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.CommentText":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "CommentText", "String");
                xamlMember.Getter = get_50_RequestDetailsViewModel_CommentText;
                xamlMember.Setter = set_50_RequestDetailsViewModel_CommentText;
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.CommentsCount":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "CommentsCount", "Int32");
                xamlMember.Getter = get_51_RequestDetailsViewModel_CommentsCount;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.HelpersCount":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpersCount", "Int32");
                xamlMember.Getter = get_52_RequestDetailsViewModel_HelpersCount;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.RequestDetailsLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "RequestDetailsLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_53_RequestDetailsViewModel_RequestDetailsLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.AddComment":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "AddComment", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_54_RequestDetailsViewModel_AddComment;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.ViewOnMap":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ViewOnMap", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_55_RequestDetailsViewModel_ViewOnMap;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.SearchRequestsViewModel.QueryText":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.SearchRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "QueryText", "String");
                xamlMember.Getter = get_56_SearchRequestsViewModel_QueryText;
                xamlMember.Setter = set_56_SearchRequestsViewModel_QueryText;
                break;
            case "INeedHelp.Client.ViewModels.SearchRequestsViewModel.HelpRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.SearchRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpRequests", "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlMember.Getter = get_57_SearchRequestsViewModel_HelpRequests;
                xamlMember.Setter = set_57_SearchRequestsViewModel_HelpRequests;
                break;
            case "INeedHelp.Client.ViewModels.SearchRequestsViewModel.SearchLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.SearchRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "SearchLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_58_SearchRequestsViewModel_SearchLoaded;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType
    {
        global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


