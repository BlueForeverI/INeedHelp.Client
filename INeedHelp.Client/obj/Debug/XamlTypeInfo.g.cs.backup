//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace INeedHelp.Client
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace INeedHelp.Client.INeedHelp_Client_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_LayoutAwarePage() { return new global::INeedHelp.Client.Common.LayoutAwarePage(); }

        private object Activate_1_AddRequestViewModel() { return new global::INeedHelp.Client.ViewModels.AddRequestViewModel(); }

        private object Activate_2_BaseViewModel() { return new global::INeedHelp.Client.ViewModels.BaseViewModel(); }

        private object Activate_4_AddRequestView() { return new global::INeedHelp.Client.Views.AddRequestView(); }

        private object Activate_5_EditRequestViewModel() { return new global::INeedHelp.Client.ViewModels.EditRequestViewModel(); }

        private object Activate_6_HelpRequestModel() { return new global::INeedHelp.Client.Models.HelpRequestModel(); }

        private object Activate_7_EditRequestView() { return new global::INeedHelp.Client.Views.EditRequestView(); }

        private object Activate_8_AppViewModel() { return new global::INeedHelp.Client.ViewModels.AppViewModel(); }

        private object Activate_10_HomeView() { return new global::INeedHelp.Client.Views.HomeView(); }

        private object Activate_11_LoginViewModel() { return new global::INeedHelp.Client.ViewModels.LoginViewModel(); }

        private object Activate_12_LoginView() { return new global::INeedHelp.Client.Views.LoginView(); }

        private object Activate_13_MyHelpRequestsViewModel() { return new global::INeedHelp.Client.ViewModels.MyHelpRequestsViewModel(); }

        private object Activate_14_MyRequestsView() { return new global::INeedHelp.Client.Views.MyRequestsView(); }

        private object Activate_15_RegisterViewModel() { return new global::INeedHelp.Client.ViewModels.RegisterViewModel(); }

        private object Activate_16_RegisterView() { return new global::INeedHelp.Client.Views.RegisterView(); }

        private object Activate_17_RequestDetailsViewModel() { return new global::INeedHelp.Client.ViewModels.RequestDetailsViewModel(); }

        private object Activate_18_RequestDetailsView() { return new global::INeedHelp.Client.Views.RequestDetailsView(); }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Object":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "INeedHelp.Client.Common.LayoutAwarePage":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_LayoutAwarePage;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.AddRequestViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.AddRequestViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_1_AddRequestViewModel;
                userType.AddMemberName("Text");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Title");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("AddRequest");
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.BaseViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.BaseViewModel), GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_BaseViewModel;
                userType.AddMemberName("SuccessMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ErrorMessage");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "System.Windows.Input.ICommand":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Windows.Input.ICommand), null);
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.AddRequestView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.AddRequestView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_4_AddRequestView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.EditRequestViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.EditRequestViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_5_EditRequestViewModel;
                userType.AddMemberName("HelpRequest");
                userType.AddMemberName("EditRequestLoaded");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Models.HelpRequestModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Models.HelpRequestModel), GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_HelpRequestModel;
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.EditRequestView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.EditRequestView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_7_EditRequestView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.AppViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.AppViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_8_AppViewModel;
                userType.AddMemberName("Username");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("HelpRequests");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                userType.AddMemberName("HomeViewLoaded");
                userType.AddMemberName("Logout");
                userType.AddMemberName("GoToAddRequest");
                userType.AddMemberName("GoToMyRequests");
                xamlType = userType;
                break;

            case "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>), null);
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.HomeView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.HomeView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_10_HomeView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.LoginViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.LoginViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_11_LoginViewModel;
                userType.AddMemberName("Username");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Login");
                userType.AddMemberName("GoToRegister");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.LoginView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.LoginView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_12_LoginView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.MyHelpRequestsViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.MyHelpRequestsViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_13_MyHelpRequestsViewModel;
                userType.AddMemberName("HelpRequests");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>),
                                                   "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.MyRequestsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.MyRequestsView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_14_MyRequestsView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.RegisterViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.RegisterViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_15_RegisterViewModel;
                userType.AddMemberName("Username");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("FirstName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("LastName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Register");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.RegisterView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.RegisterView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_16_RegisterView;
                xamlType = userType;
                break;

            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.ViewModels.RequestDetailsViewModel), GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel"));
                userType.Activator = Activate_17_RequestDetailsViewModel;
                userType.AddMemberName("Request");
                userType.AddMemberName("CommentText");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("RequestDetailsLoaded");
                userType.AddMemberName("AddComment");
                xamlType = userType;
                break;

            case "INeedHelp.Client.Views.RequestDetailsView":
                userType = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::INeedHelp.Client.Views.RequestDetailsView), GetXamlTypeByName("INeedHelp.Client.Common.LayoutAwarePage"));
                userType.Activator = Activate_18_RequestDetailsView;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_AddRequestViewModel_Text(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.Text;
        }
        private void set_0_AddRequestViewModel_Text(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_1_AddRequestViewModel_Title(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.Title;
        }
        private void set_1_AddRequestViewModel_Title(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_2_AddRequestViewModel_AddRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AddRequestViewModel)instance;
            return that.AddRequest;
        }
        private object get_3_BaseViewModel_SuccessMessage(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.SuccessMessage;
        }
        private void set_3_BaseViewModel_SuccessMessage(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            that.SuccessMessage = (global::System.String)Value;
        }
        private object get_4_BaseViewModel_ErrorMessage(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            return that.ErrorMessage;
        }
        private void set_4_BaseViewModel_ErrorMessage(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.BaseViewModel)instance;
            that.ErrorMessage = (global::System.String)Value;
        }
        private object get_5_EditRequestViewModel_HelpRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.HelpRequest;
        }
        private void set_5_EditRequestViewModel_HelpRequest(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            that.HelpRequest = (global::INeedHelp.Client.Models.HelpRequestModel)Value;
        }
        private object get_6_EditRequestViewModel_EditRequestLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.EditRequestViewModel)instance;
            return that.EditRequestLoaded;
        }
        private object get_7_AppViewModel_Username(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            return that.Username;
        }
        private void set_7_AppViewModel_Username(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_8_AppViewModel_HelpRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            return that.HelpRequests;
        }
        private void set_8_AppViewModel_HelpRequests(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            that.HelpRequests = (global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>)Value;
        }
        private object get_9_AppViewModel_HomeViewLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            return that.HomeViewLoaded;
        }
        private object get_10_AppViewModel_Logout(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            return that.Logout;
        }
        private object get_11_AppViewModel_GoToAddRequest(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            return that.GoToAddRequest;
        }
        private object get_12_AppViewModel_GoToMyRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.AppViewModel)instance;
            return that.GoToMyRequests;
        }
        private object get_13_LoginViewModel_Username(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.Username;
        }
        private void set_13_LoginViewModel_Username(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_14_LoginViewModel_Login(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.Login;
        }
        private object get_15_LoginViewModel_GoToRegister(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.LoginViewModel)instance;
            return that.GoToRegister;
        }
        private object get_16_MyHelpRequestsViewModel_HelpRequests(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyHelpRequestsViewModel)instance;
            return that.HelpRequests;
        }
        private void set_16_MyHelpRequestsViewModel_HelpRequests(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.MyHelpRequestsViewModel)instance;
            that.HelpRequests = (global::System.Collections.Generic.IEnumerable<global::INeedHelp.Client.Models.HelpRequestModel>)Value;
        }
        private object get_17_RegisterViewModel_Username(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.Username;
        }
        private void set_17_RegisterViewModel_Username(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.Username = (global::System.String)Value;
        }
        private object get_18_RegisterViewModel_FirstName(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.FirstName;
        }
        private void set_18_RegisterViewModel_FirstName(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.FirstName = (global::System.String)Value;
        }
        private object get_19_RegisterViewModel_LastName(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.LastName;
        }
        private void set_19_RegisterViewModel_LastName(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            that.LastName = (global::System.String)Value;
        }
        private object get_20_RegisterViewModel_Register(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RegisterViewModel)instance;
            return that.Register;
        }
        private object get_21_RequestDetailsViewModel_Request(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.Request;
        }
        private void set_21_RequestDetailsViewModel_Request(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            that.Request = (global::INeedHelp.Client.Models.HelpRequestModel)Value;
        }
        private object get_22_RequestDetailsViewModel_CommentText(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.CommentText;
        }
        private void set_22_RequestDetailsViewModel_CommentText(object instance, object Value)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            that.CommentText = (global::System.String)Value;
        }
        private object get_23_RequestDetailsViewModel_RequestDetailsLoaded(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.RequestDetailsLoaded;
        }
        private object get_24_RequestDetailsViewModel_AddComment(object instance)
        {
            var that = (global::INeedHelp.Client.ViewModels.RequestDetailsViewModel)instance;
            return that.AddComment;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember xamlMember = null;
            global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.Text":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.Getter = get_0_AddRequestViewModel_Text;
                xamlMember.Setter = set_0_AddRequestViewModel_Text;
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.Title":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_1_AddRequestViewModel_Title;
                xamlMember.Setter = set_1_AddRequestViewModel_Title;
                break;
            case "INeedHelp.Client.ViewModels.AddRequestViewModel.AddRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AddRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "AddRequest", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_2_AddRequestViewModel_AddRequest;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.SuccessMessage":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "SuccessMessage", "String");
                xamlMember.Getter = get_3_BaseViewModel_SuccessMessage;
                xamlMember.Setter = set_3_BaseViewModel_SuccessMessage;
                break;
            case "INeedHelp.Client.ViewModels.BaseViewModel.ErrorMessage":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.BaseViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "ErrorMessage", "String");
                xamlMember.Getter = get_4_BaseViewModel_ErrorMessage;
                xamlMember.Setter = set_4_BaseViewModel_ErrorMessage;
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.HelpRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpRequest", "INeedHelp.Client.Models.HelpRequestModel");
                xamlMember.Getter = get_5_EditRequestViewModel_HelpRequest;
                xamlMember.Setter = set_5_EditRequestViewModel_HelpRequest;
                break;
            case "INeedHelp.Client.ViewModels.EditRequestViewModel.EditRequestLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.EditRequestViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "EditRequestLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_6_EditRequestViewModel_EditRequestLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AppViewModel.Username":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AppViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_7_AppViewModel_Username;
                xamlMember.Setter = set_7_AppViewModel_Username;
                break;
            case "INeedHelp.Client.ViewModels.AppViewModel.HelpRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AppViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpRequests", "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlMember.Getter = get_8_AppViewModel_HelpRequests;
                xamlMember.Setter = set_8_AppViewModel_HelpRequests;
                break;
            case "INeedHelp.Client.ViewModels.AppViewModel.HomeViewLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AppViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HomeViewLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_9_AppViewModel_HomeViewLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AppViewModel.Logout":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AppViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Logout", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_10_AppViewModel_Logout;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AppViewModel.GoToAddRequest":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AppViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToAddRequest", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_11_AppViewModel_GoToAddRequest;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.AppViewModel.GoToMyRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.AppViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToMyRequests", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_12_AppViewModel_GoToMyRequests;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.Username":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_13_LoginViewModel_Username;
                xamlMember.Setter = set_13_LoginViewModel_Username;
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.Login":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Login", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_14_LoginViewModel_Login;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.LoginViewModel.GoToRegister":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.LoginViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "GoToRegister", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_15_LoginViewModel_GoToRegister;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.MyHelpRequestsViewModel.HelpRequests":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.MyHelpRequestsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "HelpRequests", "System.Collections.Generic.IEnumerable<INeedHelp.Client.Models.HelpRequestModel>");
                xamlMember.Getter = get_16_MyHelpRequestsViewModel_HelpRequests;
                xamlMember.Setter = set_16_MyHelpRequestsViewModel_HelpRequests;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.Username":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Username", "String");
                xamlMember.Getter = get_17_RegisterViewModel_Username;
                xamlMember.Setter = set_17_RegisterViewModel_Username;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.FirstName":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "FirstName", "String");
                xamlMember.Getter = get_18_RegisterViewModel_FirstName;
                xamlMember.Setter = set_18_RegisterViewModel_FirstName;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.LastName":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "LastName", "String");
                xamlMember.Getter = get_19_RegisterViewModel_LastName;
                xamlMember.Setter = set_19_RegisterViewModel_LastName;
                break;
            case "INeedHelp.Client.ViewModels.RegisterViewModel.Register":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RegisterViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Register", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_20_RegisterViewModel_Register;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.Request":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "Request", "INeedHelp.Client.Models.HelpRequestModel");
                xamlMember.Getter = get_21_RequestDetailsViewModel_Request;
                xamlMember.Setter = set_21_RequestDetailsViewModel_Request;
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.CommentText":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "CommentText", "String");
                xamlMember.Getter = get_22_RequestDetailsViewModel_CommentText;
                xamlMember.Setter = set_22_RequestDetailsViewModel_CommentText;
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.RequestDetailsLoaded":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "RequestDetailsLoaded", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_23_RequestDetailsViewModel_RequestDetailsLoaded;
                xamlMember.SetIsReadOnly();
                break;
            case "INeedHelp.Client.ViewModels.RequestDetailsViewModel.AddComment":
                userType = (global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlUserType)GetXamlTypeByName("INeedHelp.Client.ViewModels.RequestDetailsViewModel");
                xamlMember = new global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlMember(this, "AddComment", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_24_RequestDetailsViewModel_AddComment;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlSystemBaseType
    {
        global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::INeedHelp.Client.INeedHelp_Client_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


